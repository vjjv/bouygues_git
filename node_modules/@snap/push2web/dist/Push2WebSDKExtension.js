import { Injectable, LensSources, createExtension, lensSourcesFactory, } from "@snap/camera-kit";
import { operationalMetricReporterFactory, } from "@snap/camera-kit/lib/metrics/operational/operationalMetricsReporter";
import { cameraKitServiceFetchHandlerFactory } from "@snap/camera-kit/lib/handlers/cameraKitServiceFetchHandlerFactory";
import { HandlerChainBuilder } from "@snap/camera-kit/lib/handlers/HandlerChainBuilder";
import { createRateLimitingHandler } from "@snap/camera-kit/lib/handlers/rateLimitingHandler";
import { PageVisibility } from "@snap/camera-kit/lib/common/pageVisibility";
import { reportEvent } from "./reportEvent";
export class Push2WebSDKExtension {
    extension;
    groupId = "PUSH_2_WEB_GROUP_ID";
    lastPushedEnvelope = undefined;
    metricsReporter = undefined;
    metricRequestRateLimitMs = 1000;
    constructor() {
        const push2WebLensSource = {
            isGroupOwner: (groupId) => groupId === this.groupId,
            getLens: async () => {
                if (this.lastPushedEnvelope != undefined) {
                    return this.lastPushedEnvelope;
                }
                throw new Error("No pushed lens found.");
            },
            getLensGroup: async () => {
                if (this.lastPushedEnvelope != undefined) {
                    return [this.lastPushedEnvelope];
                }
                return [];
            },
        };
        const lensSourceFactory = Injectable(lensSourcesFactory.token, [lensSourcesFactory.token, "configuration"], (lensSources, configuration) => {
            const handler = cameraKitServiceFetchHandlerFactory(configuration, fetch);
            const pageVisibility = new PageVisibility();
            const metricsHandler = new HandlerChainBuilder(handler).map(createRateLimitingHandler(this.metricRequestRateLimitMs, pageVisibility)).handler;
            this.metricsReporter = operationalMetricReporterFactory(metricsHandler, pageVisibility, configuration);
            return new LensSources(lensSources, push2WebLensSource);
        });
        this.extension = createExtension().provides(lensSourceFactory);
    }
    updateEnvelope(newEnvelope) {
        this.lastPushedEnvelope = newEnvelope;
    }
    reportEvent(events) {
        if (this.metricsReporter) {
            reportEvent(this.metricsReporter, events);
        }
    }
}
