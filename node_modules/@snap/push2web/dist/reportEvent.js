function assertUnreachable(_) {
    throw new Error("Reached unreachable code at runtime.");
}
// Document wich describes the operational metrics we send:
// https://docs.google.com/document/d/1wGadstNanzvB_7XYf7fMlQhsHi90p73CHtpD39r_d3g/edit?pli=1#
export function reportEvent(metricsReporter, event) {
    const { type } = event;
    switch (type) {
        case "error": {
            const dimensions = new Map();
            if (event.detail.name === "CommunicationError") {
                dimensions.set("type", "subscription").set("cause", event.detail.grpcStatus);
            }
            else if (event.detail.name === "LensExcludedError") {
                dimensions.set("type", "lens_excluded").set("cause", event.detail.reason);
            }
            metricsReporter.count("push2web_error", 1, dimensions);
            break;
        }
        case "lensReceived": {
            metricsReporter.count("push2web_received", 1);
            break;
        }
        case "subscriptionChanged": // do not report subscription changed events
            break;
        default: {
            assertUnreachable(type);
        }
    }
}
