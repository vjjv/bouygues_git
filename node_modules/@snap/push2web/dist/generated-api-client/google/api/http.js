/* eslint-disable */
import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "google.api";
function createBaseHttp() {
    return { rules: [], fullyDecodeReservedExpansion: false };
}
export const Http = {
    encode(message, writer = _m0.Writer.create()) {
        for (const v of message.rules) {
            HttpRule.encode(v, writer.uint32(10).fork()).ldelim();
        }
        if (message.fullyDecodeReservedExpansion === true) {
            writer.uint32(16).bool(message.fullyDecodeReservedExpansion);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHttp();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.rules.push(HttpRule.decode(reader, reader.uint32()));
                    break;
                case 2:
                    message.fullyDecodeReservedExpansion = reader.bool();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            rules: Array.isArray(object?.rules) ? object.rules.map((e) => HttpRule.fromJSON(e)) : [],
            fullyDecodeReservedExpansion: isSet(object.fullyDecodeReservedExpansion)
                ? Boolean(object.fullyDecodeReservedExpansion)
                : false,
        };
    },
    toJSON(message) {
        const obj = {};
        if (message.rules) {
            obj.rules = message.rules.map((e) => (e ? HttpRule.toJSON(e) : undefined));
        }
        else {
            obj.rules = [];
        }
        message.fullyDecodeReservedExpansion !== undefined &&
            (obj.fullyDecodeReservedExpansion = message.fullyDecodeReservedExpansion);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseHttp();
        message.rules = object.rules?.map((e) => HttpRule.fromPartial(e)) || [];
        message.fullyDecodeReservedExpansion = object.fullyDecodeReservedExpansion ?? false;
        return message;
    },
};
function createBaseHttpRule() {
    return { selector: "", pattern: undefined, body: "", additionalBindings: [] };
}
export const HttpRule = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.selector !== "") {
            writer.uint32(10).string(message.selector);
        }
        if (message.pattern?.$case === "get") {
            writer.uint32(18).string(message.pattern.get);
        }
        if (message.pattern?.$case === "put") {
            writer.uint32(26).string(message.pattern.put);
        }
        if (message.pattern?.$case === "post") {
            writer.uint32(34).string(message.pattern.post);
        }
        if (message.pattern?.$case === "delete") {
            writer.uint32(42).string(message.pattern.delete);
        }
        if (message.pattern?.$case === "patch") {
            writer.uint32(50).string(message.pattern.patch);
        }
        if (message.pattern?.$case === "custom") {
            CustomHttpPattern.encode(message.pattern.custom, writer.uint32(66).fork()).ldelim();
        }
        if (message.body !== "") {
            writer.uint32(58).string(message.body);
        }
        for (const v of message.additionalBindings) {
            HttpRule.encode(v, writer.uint32(90).fork()).ldelim();
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseHttpRule();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.selector = reader.string();
                    break;
                case 2:
                    message.pattern = { $case: "get", get: reader.string() };
                    break;
                case 3:
                    message.pattern = { $case: "put", put: reader.string() };
                    break;
                case 4:
                    message.pattern = { $case: "post", post: reader.string() };
                    break;
                case 5:
                    message.pattern = { $case: "delete", delete: reader.string() };
                    break;
                case 6:
                    message.pattern = { $case: "patch", patch: reader.string() };
                    break;
                case 8:
                    message.pattern = { $case: "custom", custom: CustomHttpPattern.decode(reader, reader.uint32()) };
                    break;
                case 7:
                    message.body = reader.string();
                    break;
                case 11:
                    message.additionalBindings.push(HttpRule.decode(reader, reader.uint32()));
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            selector: isSet(object.selector) ? String(object.selector) : "",
            pattern: isSet(object.get)
                ? { $case: "get", get: String(object.get) }
                : isSet(object.put)
                    ? { $case: "put", put: String(object.put) }
                    : isSet(object.post)
                        ? { $case: "post", post: String(object.post) }
                        : isSet(object.delete)
                            ? { $case: "delete", delete: String(object.delete) }
                            : isSet(object.patch)
                                ? { $case: "patch", patch: String(object.patch) }
                                : isSet(object.custom)
                                    ? { $case: "custom", custom: CustomHttpPattern.fromJSON(object.custom) }
                                    : undefined,
            body: isSet(object.body) ? String(object.body) : "",
            additionalBindings: Array.isArray(object?.additionalBindings)
                ? object.additionalBindings.map((e) => HttpRule.fromJSON(e))
                : [],
        };
    },
    toJSON(message) {
        const obj = {};
        message.selector !== undefined && (obj.selector = message.selector);
        message.pattern?.$case === "get" && (obj.get = message.pattern?.get);
        message.pattern?.$case === "put" && (obj.put = message.pattern?.put);
        message.pattern?.$case === "post" && (obj.post = message.pattern?.post);
        message.pattern?.$case === "delete" && (obj.delete = message.pattern?.delete);
        message.pattern?.$case === "patch" && (obj.patch = message.pattern?.patch);
        message.pattern?.$case === "custom" &&
            (obj.custom = message.pattern?.custom ? CustomHttpPattern.toJSON(message.pattern?.custom) : undefined);
        message.body !== undefined && (obj.body = message.body);
        if (message.additionalBindings) {
            obj.additionalBindings = message.additionalBindings.map((e) => (e ? HttpRule.toJSON(e) : undefined));
        }
        else {
            obj.additionalBindings = [];
        }
        return obj;
    },
    fromPartial(object) {
        const message = createBaseHttpRule();
        message.selector = object.selector ?? "";
        if (object.pattern?.$case === "get" && object.pattern?.get !== undefined && object.pattern?.get !== null) {
            message.pattern = { $case: "get", get: object.pattern.get };
        }
        if (object.pattern?.$case === "put" && object.pattern?.put !== undefined && object.pattern?.put !== null) {
            message.pattern = { $case: "put", put: object.pattern.put };
        }
        if (object.pattern?.$case === "post" && object.pattern?.post !== undefined && object.pattern?.post !== null) {
            message.pattern = { $case: "post", post: object.pattern.post };
        }
        if (object.pattern?.$case === "delete" && object.pattern?.delete !== undefined && object.pattern?.delete !== null) {
            message.pattern = { $case: "delete", delete: object.pattern.delete };
        }
        if (object.pattern?.$case === "patch" && object.pattern?.patch !== undefined && object.pattern?.patch !== null) {
            message.pattern = { $case: "patch", patch: object.pattern.patch };
        }
        if (object.pattern?.$case === "custom" && object.pattern?.custom !== undefined && object.pattern?.custom !== null) {
            message.pattern = { $case: "custom", custom: CustomHttpPattern.fromPartial(object.pattern.custom) };
        }
        message.body = object.body ?? "";
        message.additionalBindings = object.additionalBindings?.map((e) => HttpRule.fromPartial(e)) || [];
        return message;
    },
};
function createBaseCustomHttpPattern() {
    return { kind: "", path: "" };
}
export const CustomHttpPattern = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.kind !== "") {
            writer.uint32(10).string(message.kind);
        }
        if (message.path !== "") {
            writer.uint32(18).string(message.path);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCustomHttpPattern();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.kind = reader.string();
                    break;
                case 2:
                    message.path = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            kind: isSet(object.kind) ? String(object.kind) : "",
            path: isSet(object.path) ? String(object.path) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.kind !== undefined && (obj.kind = message.kind);
        message.path !== undefined && (obj.path = message.path);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCustomHttpPattern();
        message.kind = object.kind ?? "";
        message.path = object.path ?? "";
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
