import _m0 from "protobufjs/minimal";
export declare const protobufPackage = "snapchat.core";
export declare enum Code {
    OK = "OK",
    CANCELLED = "CANCELLED",
    UNKNOWN = "UNKNOWN",
    INVALID_ARGUMENT = "INVALID_ARGUMENT",
    DEADLINE_EXCEEDED = "DEADLINE_EXCEEDED",
    NOT_FOUND = "NOT_FOUND",
    ALREADY_EXISTS = "ALREADY_EXISTS",
    PERMISSION_DENIED = "PERMISSION_DENIED",
    UNAUTHENTICATED = "UNAUTHENTICATED",
    RESOURCE_EXHAUSTED = "RESOURCE_EXHAUSTED",
    FAILED_PRECONDITION = "FAILED_PRECONDITION",
    ABORTED = "ABORTED",
    OUT_OF_RANGE = "OUT_OF_RANGE",
    UNIMPLEMENTED = "UNIMPLEMENTED",
    INTERNAL = "INTERNAL",
    UNAVAILABLE = "UNAVAILABLE",
    DATA_LOSS = "DATA_LOSS",
    NOT_MODIFIED = "NOT_MODIFIED",
    DECRYPTION_FAILED = "DECRYPTION_FAILED",
    INVALID_MEDIA = "INVALID_MEDIA",
    IN_PROGRESS = "IN_PROGRESS",
    CONTENT_TOO_LARGE = "CONTENT_TOO_LARGE",
    URL_PROTOCOL_NOT_SUPPORTED = "URL_PROTOCOL_NOT_SUPPORTED",
    URL_CONTENT_TYPE_NOT_WHITELISTED = "URL_CONTENT_TYPE_NOT_WHITELISTED",
    URL_DOWNLOAD_FAILURE = "URL_DOWNLOAD_FAILURE",
    CLOUD_STORAGE_FAILURE = "CLOUD_STORAGE_FAILURE",
    UNRECOGNIZED = "UNRECOGNIZED"
}
export declare function codeFromJSON(object: any): Code;
export declare function codeToJSON(object: Code): string;
export declare function codeToNumber(object: Code): number;
export interface CodeProperties {
    errorCode: number;
    errorDescription: string;
    isRetryable: boolean;
    source: string;
}
export declare const CodeProperties: {
    encode(message: CodeProperties, writer?: _m0.Writer): _m0.Writer;
    decode(input: _m0.Reader | Uint8Array, length?: number): CodeProperties;
    fromJSON(object: any): CodeProperties;
    toJSON(message: CodeProperties): unknown;
    fromPartial<I extends {
        errorCode?: number | undefined;
        errorDescription?: string | undefined;
        isRetryable?: boolean | undefined;
        source?: string | undefined;
    } & {
        errorCode?: number | undefined;
        errorDescription?: string | undefined;
        isRetryable?: boolean | undefined;
        source?: string | undefined;
    } & Record<Exclude<keyof I, keyof CodeProperties>, never>>(object: I): CodeProperties;
};
type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;
export type DeepPartial<T> = T extends Builtin ? T : T extends Array<infer U> ? Array<DeepPartial<U>> : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>> : T extends {
    $case: string;
} ? {
    [K in keyof Omit<T, "$case">]?: DeepPartial<T[K]>;
} & {
    $case: T["$case"];
} : T extends {} ? {
    [K in keyof T]?: DeepPartial<T[K]>;
} : Partial<T>;
type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P : P & {
    [K in keyof P]: Exact<P[K], I[K]>;
} & Record<Exclude<keyof I, KeysOfUnion<P>>, never>;
export {};
