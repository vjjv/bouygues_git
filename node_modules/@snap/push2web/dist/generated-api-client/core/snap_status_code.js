import Long from "long";
import _m0 from "protobufjs/minimal";
export const protobufPackage = "snapchat.core";
export var Code;
(function (Code) {
    Code["OK"] = "OK";
    Code["CANCELLED"] = "CANCELLED";
    Code["UNKNOWN"] = "UNKNOWN";
    Code["INVALID_ARGUMENT"] = "INVALID_ARGUMENT";
    Code["DEADLINE_EXCEEDED"] = "DEADLINE_EXCEEDED";
    Code["NOT_FOUND"] = "NOT_FOUND";
    Code["ALREADY_EXISTS"] = "ALREADY_EXISTS";
    Code["PERMISSION_DENIED"] = "PERMISSION_DENIED";
    Code["UNAUTHENTICATED"] = "UNAUTHENTICATED";
    Code["RESOURCE_EXHAUSTED"] = "RESOURCE_EXHAUSTED";
    Code["FAILED_PRECONDITION"] = "FAILED_PRECONDITION";
    Code["ABORTED"] = "ABORTED";
    Code["OUT_OF_RANGE"] = "OUT_OF_RANGE";
    Code["UNIMPLEMENTED"] = "UNIMPLEMENTED";
    Code["INTERNAL"] = "INTERNAL";
    Code["UNAVAILABLE"] = "UNAVAILABLE";
    Code["DATA_LOSS"] = "DATA_LOSS";
    Code["NOT_MODIFIED"] = "NOT_MODIFIED";
    Code["DECRYPTION_FAILED"] = "DECRYPTION_FAILED";
    Code["INVALID_MEDIA"] = "INVALID_MEDIA";
    Code["IN_PROGRESS"] = "IN_PROGRESS";
    Code["CONTENT_TOO_LARGE"] = "CONTENT_TOO_LARGE";
    Code["URL_PROTOCOL_NOT_SUPPORTED"] = "URL_PROTOCOL_NOT_SUPPORTED";
    Code["URL_CONTENT_TYPE_NOT_WHITELISTED"] = "URL_CONTENT_TYPE_NOT_WHITELISTED";
    Code["URL_DOWNLOAD_FAILURE"] = "URL_DOWNLOAD_FAILURE";
    Code["CLOUD_STORAGE_FAILURE"] = "CLOUD_STORAGE_FAILURE";
    Code["UNRECOGNIZED"] = "UNRECOGNIZED";
})(Code || (Code = {}));
export function codeFromJSON(object) {
    switch (object) {
        case 0:
        case "OK":
            return Code.OK;
        case 1:
        case "CANCELLED":
            return Code.CANCELLED;
        case 2:
        case "UNKNOWN":
            return Code.UNKNOWN;
        case 3:
        case "INVALID_ARGUMENT":
            return Code.INVALID_ARGUMENT;
        case 4:
        case "DEADLINE_EXCEEDED":
            return Code.DEADLINE_EXCEEDED;
        case 5:
        case "NOT_FOUND":
            return Code.NOT_FOUND;
        case 6:
        case "ALREADY_EXISTS":
            return Code.ALREADY_EXISTS;
        case 7:
        case "PERMISSION_DENIED":
            return Code.PERMISSION_DENIED;
        case 16:
        case "UNAUTHENTICATED":
            return Code.UNAUTHENTICATED;
        case 8:
        case "RESOURCE_EXHAUSTED":
            return Code.RESOURCE_EXHAUSTED;
        case 9:
        case "FAILED_PRECONDITION":
            return Code.FAILED_PRECONDITION;
        case 10:
        case "ABORTED":
            return Code.ABORTED;
        case 11:
        case "OUT_OF_RANGE":
            return Code.OUT_OF_RANGE;
        case 12:
        case "UNIMPLEMENTED":
            return Code.UNIMPLEMENTED;
        case 13:
        case "INTERNAL":
            return Code.INTERNAL;
        case 14:
        case "UNAVAILABLE":
            return Code.UNAVAILABLE;
        case 15:
        case "DATA_LOSS":
            return Code.DATA_LOSS;
        case 100:
        case "NOT_MODIFIED":
            return Code.NOT_MODIFIED;
        case 101:
        case "DECRYPTION_FAILED":
            return Code.DECRYPTION_FAILED;
        case 102:
        case "INVALID_MEDIA":
            return Code.INVALID_MEDIA;
        case 200:
        case "IN_PROGRESS":
            return Code.IN_PROGRESS;
        case 201:
        case "CONTENT_TOO_LARGE":
            return Code.CONTENT_TOO_LARGE;
        case 202:
        case "URL_PROTOCOL_NOT_SUPPORTED":
            return Code.URL_PROTOCOL_NOT_SUPPORTED;
        case 203:
        case "URL_CONTENT_TYPE_NOT_WHITELISTED":
            return Code.URL_CONTENT_TYPE_NOT_WHITELISTED;
        case 204:
        case "URL_DOWNLOAD_FAILURE":
            return Code.URL_DOWNLOAD_FAILURE;
        case 205:
        case "CLOUD_STORAGE_FAILURE":
            return Code.CLOUD_STORAGE_FAILURE;
        case -1:
        case "UNRECOGNIZED":
        default:
            return Code.UNRECOGNIZED;
    }
}
export function codeToJSON(object) {
    switch (object) {
        case Code.OK:
            return "OK";
        case Code.CANCELLED:
            return "CANCELLED";
        case Code.UNKNOWN:
            return "UNKNOWN";
        case Code.INVALID_ARGUMENT:
            return "INVALID_ARGUMENT";
        case Code.DEADLINE_EXCEEDED:
            return "DEADLINE_EXCEEDED";
        case Code.NOT_FOUND:
            return "NOT_FOUND";
        case Code.ALREADY_EXISTS:
            return "ALREADY_EXISTS";
        case Code.PERMISSION_DENIED:
            return "PERMISSION_DENIED";
        case Code.UNAUTHENTICATED:
            return "UNAUTHENTICATED";
        case Code.RESOURCE_EXHAUSTED:
            return "RESOURCE_EXHAUSTED";
        case Code.FAILED_PRECONDITION:
            return "FAILED_PRECONDITION";
        case Code.ABORTED:
            return "ABORTED";
        case Code.OUT_OF_RANGE:
            return "OUT_OF_RANGE";
        case Code.UNIMPLEMENTED:
            return "UNIMPLEMENTED";
        case Code.INTERNAL:
            return "INTERNAL";
        case Code.UNAVAILABLE:
            return "UNAVAILABLE";
        case Code.DATA_LOSS:
            return "DATA_LOSS";
        case Code.NOT_MODIFIED:
            return "NOT_MODIFIED";
        case Code.DECRYPTION_FAILED:
            return "DECRYPTION_FAILED";
        case Code.INVALID_MEDIA:
            return "INVALID_MEDIA";
        case Code.IN_PROGRESS:
            return "IN_PROGRESS";
        case Code.CONTENT_TOO_LARGE:
            return "CONTENT_TOO_LARGE";
        case Code.URL_PROTOCOL_NOT_SUPPORTED:
            return "URL_PROTOCOL_NOT_SUPPORTED";
        case Code.URL_CONTENT_TYPE_NOT_WHITELISTED:
            return "URL_CONTENT_TYPE_NOT_WHITELISTED";
        case Code.URL_DOWNLOAD_FAILURE:
            return "URL_DOWNLOAD_FAILURE";
        case Code.CLOUD_STORAGE_FAILURE:
            return "CLOUD_STORAGE_FAILURE";
        default:
            return "UNKNOWN";
    }
}
export function codeToNumber(object) {
    switch (object) {
        case Code.OK:
            return 0;
        case Code.CANCELLED:
            return 1;
        case Code.UNKNOWN:
            return 2;
        case Code.INVALID_ARGUMENT:
            return 3;
        case Code.DEADLINE_EXCEEDED:
            return 4;
        case Code.NOT_FOUND:
            return 5;
        case Code.ALREADY_EXISTS:
            return 6;
        case Code.PERMISSION_DENIED:
            return 7;
        case Code.UNAUTHENTICATED:
            return 16;
        case Code.RESOURCE_EXHAUSTED:
            return 8;
        case Code.FAILED_PRECONDITION:
            return 9;
        case Code.ABORTED:
            return 10;
        case Code.OUT_OF_RANGE:
            return 11;
        case Code.UNIMPLEMENTED:
            return 12;
        case Code.INTERNAL:
            return 13;
        case Code.UNAVAILABLE:
            return 14;
        case Code.DATA_LOSS:
            return 15;
        case Code.NOT_MODIFIED:
            return 100;
        case Code.DECRYPTION_FAILED:
            return 101;
        case Code.INVALID_MEDIA:
            return 102;
        case Code.IN_PROGRESS:
            return 200;
        case Code.CONTENT_TOO_LARGE:
            return 201;
        case Code.URL_PROTOCOL_NOT_SUPPORTED:
            return 202;
        case Code.URL_CONTENT_TYPE_NOT_WHITELISTED:
            return 203;
        case Code.URL_DOWNLOAD_FAILURE:
            return 204;
        case Code.CLOUD_STORAGE_FAILURE:
            return 205;
        default:
            return 0;
    }
}
function createBaseCodeProperties() {
    return { errorCode: 0, errorDescription: "", isRetryable: false, source: "" };
}
export const CodeProperties = {
    encode(message, writer = _m0.Writer.create()) {
        if (message.errorCode !== 0) {
            writer.uint32(8).uint32(message.errorCode);
        }
        if (message.errorDescription !== "") {
            writer.uint32(18).string(message.errorDescription);
        }
        if (message.isRetryable === true) {
            writer.uint32(24).bool(message.isRetryable);
        }
        if (message.source !== "") {
            writer.uint32(34).string(message.source);
        }
        return writer;
    },
    decode(input, length) {
        const reader = input instanceof _m0.Reader ? input : new _m0.Reader(input);
        let end = length === undefined ? reader.len : reader.pos + length;
        const message = createBaseCodeProperties();
        while (reader.pos < end) {
            const tag = reader.uint32();
            switch (tag >>> 3) {
                case 1:
                    message.errorCode = reader.uint32();
                    break;
                case 2:
                    message.errorDescription = reader.string();
                    break;
                case 3:
                    message.isRetryable = reader.bool();
                    break;
                case 4:
                    message.source = reader.string();
                    break;
                default:
                    reader.skipType(tag & 7);
                    break;
            }
        }
        return message;
    },
    fromJSON(object) {
        return {
            errorCode: isSet(object.errorCode) ? Number(object.errorCode) : 0,
            errorDescription: isSet(object.errorDescription) ? String(object.errorDescription) : "",
            isRetryable: isSet(object.isRetryable) ? Boolean(object.isRetryable) : false,
            source: isSet(object.source) ? String(object.source) : "",
        };
    },
    toJSON(message) {
        const obj = {};
        message.errorCode !== undefined && (obj.errorCode = Math.round(message.errorCode));
        message.errorDescription !== undefined && (obj.errorDescription = message.errorDescription);
        message.isRetryable !== undefined && (obj.isRetryable = message.isRetryable);
        message.source !== undefined && (obj.source = message.source);
        return obj;
    },
    fromPartial(object) {
        const message = createBaseCodeProperties();
        message.errorCode = object.errorCode ?? 0;
        message.errorDescription = object.errorDescription ?? "";
        message.isRetryable = object.isRetryable ?? false;
        message.source = object.source ?? "";
        return message;
    },
};
if (_m0.util.Long !== Long) {
    _m0.util.Long = Long;
    _m0.configure();
}
function isSet(value) {
    return value !== null && value !== undefined;
}
