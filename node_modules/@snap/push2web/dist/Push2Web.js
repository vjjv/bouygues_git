import { cameraKitUserAgent, toPublicLens, TypedCustomEvent, TypedEventTarget, } from "@snap/camera-kit";
import { grpc } from "@improbable-eng/grpc-web";
import { map, catchError, of, switchMap, ReplaySubject } from "rxjs";
import { GrpcWebImpl, ListenLensPushRequest, listenLensPushResponse_ExcludedLens_CodeFromJSON, PushToDeviceClientImpl, } from "./generated-api-client/camera_kit/v3/push_to_device";
import { Envelope } from "./generated-api-client/camera_kit/v3/export";
import { codeFromJSON } from "./generated-api-client/core/snap_status_code";
import { Push2WebSDKExtension } from "./Push2WebSDKExtension";
export class Push2Web {
    /**
     * Use this property to subscribe for the different types of events that can occur during push 2 web execution.
     *
     * Subscribe to `error` event to be aware if something has happened during the lens push,
     * with network communication or any other type of error,
     * event object also contains detailed expalantion of the cause.
     *
     * Use `subscriptionChanged` event to be aware when subscription state is changed.
     *
     * Use `lensReceived` event to be aware when new lens is received from Lens Studio,
     * also you can get the additional details about the pushed lens.
     *
     * @example
     *```ts
     *push2web.events.addEventListener('error', ({ detail }) => {
     *   if (detail.name === 'LensExcludedError') {
     *     console.log(`Lens is excluded from the push, by the following reason: ${detail.reason}.`)
     *   }
     *})
     *```
     */
    events = new TypedEventTarget();
    push2WebExtension = new Push2WebSDKExtension();
    pushedLenses;
    accesToken = new ReplaySubject(1);
    subscription;
    /**
     * Create new instance of Push2Web object,
     * it can be used to start listening for the events,
     * subscribe or unsubscribe for notifications from Lens Studio.
     * Also provides the extension object for the @snap/camera-kit package.
     */
    constructor() {
        this.pushedLenses = this.accesToken.pipe(switchMap((accessToken) => {
            const metadata = new grpc.Metadata();
            metadata.append("Authorization", `Bearer ${accessToken}`);
            metadata.append("x-snap-client-user-agent", cameraKitUserAgent.userAgent);
            const grpcWeb = new GrpcWebImpl("https://api-kit.snapchat.com", {
                metadata,
            });
            const push2WebClient = new PushToDeviceClientImpl(grpcWeb);
            return push2WebClient.ListenLensPush(ListenLensPushRequest.fromPartial({})).pipe(map(({ lenses, excludedLens }) => {
                if (excludedLens) {
                    return new TypedCustomEvent("error", {
                        name: "LensExcludedError",
                        cause: new Error("Lens excluded"),
                        lensId: excludedLens.lensId,
                        reason: listenLensPushResponse_ExcludedLens_CodeFromJSON(excludedLens.code),
                    });
                }
                const envelope = Object.values(lenses)[0];
                this.push2WebExtension.updateEnvelope(envelope);
                const [lens] = Envelope.decode(envelope).lenses;
                return new TypedCustomEvent("lensReceived", toPublicLens(lens));
            }), catchError((error) => {
                const grpcError = /Error ([\d]{1,3})/.exec(error.message);
                if (grpcError) {
                    this.events.dispatchEvent(new TypedCustomEvent("subscriptionChanged", State.Unsubscribed));
                    const grpcCode = parseInt(grpcError[1]);
                    return of(new TypedCustomEvent("error", {
                        name: "CommunicationError",
                        cause: error,
                        grpcStatus: codeFromJSON(grpcCode),
                        grpcCode,
                    }));
                }
                return of(new TypedCustomEvent("error", { name: "GenericError", cause: error }));
            }));
        }));
    }
    /**
     * The extension object must be passed to the Camera Kit object during its bootstrap process.
     * This is a requirement for the proper functioning of push to web functionality.
     *
     * @example
     * ```ts
     *import { bootstrapCameraKit } from "@snap/camera-kit";
     *
     *const push2web = new Push2Web();
     *const extensions = (container) => container.provides(push2Web.extension);
     *
     *const cameraKit = await bootstrapCameraKit({ apiToken: "token from developer portal" }, extensions);
     *const cameraKitSession = await cameraKit.createSession();
     * ```
     */
    get extension() {
        return this.push2WebExtension.extension;
    }
    /**
     * Initiate subscription for the events from Lens Studio.
     *
     * @param accessToken - After user will be logged in to the web page,
     * using Snapchat account, you can get access token from Login Kit.
     * @param cameraKitSession - Instance of CameraKitSesion object form @snap/camera-kit package.
     * @param repository - Instance of LensRepository object from @snap/camera-kit package.
     * @returns @SubscriptionInstance
     */
    subscribe(accessToken, cameraKitSession, repository) {
        this.subscription?.unsubscribe();
        this.accesToken.next(accessToken);
        this.subscription = this.pushedLenses.subscribe({
            next: async (event) => {
                this.events.dispatchEvent(event);
                if (event.type === "lensReceived") {
                    try {
                        const lens = await repository.loadLens(event.detail.id, this.push2WebExtension.groupId);
                        await cameraKitSession.removeLens();
                        await cameraKitSession.applyLens(lens);
                    }
                    catch (error) {
                        this.events.dispatchEvent(new TypedCustomEvent("error", {
                            name: "GenericError",
                            cause: error,
                        }));
                    }
                }
                this.push2WebExtension.reportEvent(event);
            },
        });
        this.events.dispatchEvent(new TypedCustomEvent("subscriptionChanged", State.Subscribed));
        return {
            unsubscribe: async () => {
                if (this.subscription) {
                    this.subscription.unsubscribe();
                    this.subscription = undefined;
                    this.events.dispatchEvent(new TypedCustomEvent("subscriptionChanged", State.Unsubscribed));
                }
            },
            updateAccessToken: (accessToken) => {
                this.accesToken.next(accessToken);
            },
        };
    }
}
export var State;
(function (State) {
    /**
     * The extension is listening for the events about pushed Lens from Lens Studio.
     */
    State["Subscribed"] = "Subscribed";
    /**
     * The extension is not listening for any events about pushed Lens.
     */
    State["Unsubscribed"] = "Unsubscribed";
})(State || (State = {}));
export const version = "0.0.0-placeholder";
